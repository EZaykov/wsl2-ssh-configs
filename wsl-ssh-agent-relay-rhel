#!/bin/bash

#### Add following lines to your shell rc file (.zshrc .bashrc)
# ${HOME}/.ssh_local/wsl-ssh-agent-relay start
# export SSH_AUTH_SOCK=${HOME}/.ssh_local/wsl-ssh-agent.sock

# If you do not want the ssh agent relay require your ssh agent
# to be running at the time relay is started add the option -s
# to wsl-ssh-agent-relay.

# For debugging startup problems uncomment next line
# exec 2> >(tee -a -i "$HOME/error.log")

PAGEANT_NPIPE="$(cat ~/.ssh/pageant.conf | cut -c 16-101)"
RELAY_BIN="/mnt/c/ProgramData/chocolatey/bin/npiperelay.exe"
PIDFILE="${HOME}/.ssh_local/wsl-ssh-agent-relay.pid"
WSL_AGENT_SSH_SOCK="${HOME}/.ssh_local/wsl-ssh-agent.sock"

log() {
    echo >&2 "$@"
}

is_pid_running() {
    if [[ -z "$1" ]]; then
        return 1
    fi
    ps -p "$1" >/dev/null
    return $?
}

_cleanup() {
    log "Cleaning up relay to ${WSL_AGENT_SSH_SOCK}..."
    if is_pid_running "${SOCAT_WSL_AGENT_SSH_PID}"; then
        kill -SIGTERM "${SOCAT_WSL_AGENT_SSH_PID}"
        log "Failed."
    fi
}

die() {
    if [[ -n "$1" ]]; then
        log "$1"
    fi
    log "Exiting."
    exit 1
}

usage() {
    log "Usage: wsl-ssh-agent-relay [OPTIONS] COMMAND"
    log ""
    log "  SUMMARY: Relay Windows openssh named pipe to local SSH socket in order to integrate WSL2 and host."
    log "           To debug use foreground command"
    log ""
    log "  OPTIONS:"
    log "    -h|--help          this page"
    log ""
    log "    -v|--verbose       verbose mode"
    log ""
    log "    -s|--skip-test     skip ssh-agent communication test"
    log ""
    log "  COMMAND: start, stop, foreground"
}

fg_opts() {
    FG_OPTS=()
    # Generate opts for passing it to foreground version
    if [[ -n "$VERBOSE" ]]; then
        FG_OPTS+=("-v")
    fi
    if [[ -n "$NO_COM_TEST" ]]; then
        FG_OPTS+=("-c")
    fi
}

main() {
    
    POSITIONAL=()
    VERBOSE=""
    SKIP_SSH_TEST=""
    while (($# > 0)); do
        case "$1" in
            -v | --verbose)
                VERBOSE="ENABLED"
                shift
            ;;
            -s | --skip-test)
                SKIP_SSH_TEST="TRUE"
                shift
            ;;
            -h | --help)
                usage
                exit 0
            ;;
            *)
                POSITIONAL+=("$1")
                shift
                if [[ "${#POSITIONAL[@]}" -gt 1 ]]; then
                    usage
                    die
                fi
            ;;
        esac
    done
    
    set -- "${POSITIONAL[@]}"
    
    if [[ -z "$VERBOSE" ]]; then
        QUIET="QUIET"
    fi
    
    case "${POSITIONAL[0]}" in
        start)
            if [[ -f "${PIDFILE}" ]]; then
                PID=$(cat "${PIDFILE}")
                if is_pid_running "$PID"; then
                    # echo "$0 is already running with PID $PID"
                    exit 0
                else
                    echo "Found stale PID file. Removing..."
                    rm "${PIDFILE}"
                fi
            fi
            fg_opts
            nohup "$0" foreground "${FG_OPTS[@]}" > /dev/null 2>&1 &
            echo $! > "${PIDFILE}"
        ;;
        stop)
            if [[ -f "${PIDFILE}" ]]; then
                PID=$(cat "${PIDFILE}")
                if is_pid_running "$PID"; then
                    kill -SIGTERM "$PID"
                    rm "${PIDFILE}"
                    echo "$0 stopped"
                else
                    echo "Process not running"
                    rm "${PIDFILE}"
                fi
            else
                echo "No PID file found"
            fi
        ;;
        status)
            if [[ -f "${PIDFILE}" ]]; then
                PID=$(cat "${PIDFILE}")
                if is_pid_running "$PID"; then
                    log "$0 is running"
                    return 0
                else
                    log "$0 is not running"
                    return 1
                fi
            else
                log "No PID file found; $0 is not running"
                return 1
            fi
        ;;
        foreground)
            relay
        ;;
        *)
            usage
            die
        ;;
    esac
}

relay() {
    
    trap _cleanup EXIT
    
    [[ -f "${RELAY_BIN}" ]] || die "Unable to access ${RELAY_BIN}"
    
    if pgrep -fx "^ssh-agent\s.+" >/dev/null; then
        log "Killing previously started local ssh-agent..."
        SSH_AGENT_PID="$(pidof ssh-agent)" ssh-agent -k >/dev/null 2>&1
    fi
    
    if [ -e "${WSL_AGENT_SSH_SOCK}" ]; then
        log "WSL has been shutdown ungracefully, leaving garbage behind"
        rm "${WSL_AGENT_SSH_SOCK}"
    fi
    
    socat UNIX-LISTEN:"\"${WSL_AGENT_SSH_SOCK}\"",fork EXEC:"\"\'${RELAY_BIN}\' -ei -s \'${PAGEANT_NPIPE}\'\"",nofork 1>/dev/null 2>&1 &
    SOCAT_WSL_AGENT_SSH_PID="$!"
    if ! is_pid_running "${SOCAT_WSL_AGENT_SSH_PID}"; then
        log "Relay for ${SOCAT_WSL_AGENT_SSH_PID} failed"
        return 1
    fi
    log "Relay is running with PID: ${SOCAT_WSL_AGENT_SSH_PID}"
    
    if [[ -z "$SKIP_SSH_TEST" ]]; then
        local res
        log -n "Polling remote ssh-agent..."
        
        SSH_AUTH_SOCK="${WSL_AGENT_SSH_SOCK}" ssh-add -L >/dev/null 2>&1
        res=$?
        [[ "${res}" -ge 2 ]] && die "[${res}] Failure communicating with ssh-agent"
        log "OK"
    fi
    
    # Everything necessary checks, we are ready for actions
    log "Entering wait..."
    wait ${SOCAT_WSL_AGENT_SSH_PID}
}

main "$@"